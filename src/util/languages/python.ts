const python = [
  "print(\"Hello, World!\")",
  "x = 5",
  "def add(a, b):\n\treturn a + b",
  "my_list = [1, 2, 3, 4, 5]",
  "my_dict = {\"name\": \"John\", \"age\": 30}",
  "x = 5\ny = 10\nsum = x + y",
  "if condition:\n\t# do something\nelse:\n\t# do something else",
  "class MyClass:\n\tdef __init__(self):\n\t\tself.data = []",
  "for item in my_list:\n\tprint(item)",
  "while x > 0:\n\tprint(x)\n\tx -= 1",
  "try:\n\t# code that may raise an error\nexcept SomeError:\n\t# handle the error",
  "import module_name",
  "from module_name import function_name",
  "with open(\"file.txt\", \"r\") as file:\n\tdata = file.read()",
  "data = requests.get(\"https://api.example.com/data\").json()",
  "result = [x for x in my_list if x % 2 == 0]",
  "class MyClass:\n\tdef my_method(self):\n\t\t# do something",
  "x = 5\ny = 3\nmax_value = x if x > y else y",
  "my_string = \"Hello, World!\"\nupper_case_string = my_string.upper()",
  "my_list = [1, 2, 3, 4, 5]\ndoubled_list = [x * 2 for x in my_list]",
  "def my_function(*args, **kwargs):\n\t# process the arguments",
  "def my_generator(n):\n\tfor i in range(n):\n\t\tyield i",
  "def my_decorator(func):\n\tdef wrapper(*args, **kwargs):\n\t\t# do something before the function is called\n\t\tresult = func(*args, **kwargs)\n\t\t# do something after the function is called\n\t\treturn result\n\treturn wrapper",
  "def my_function(x: int, y: int) -> int:\n\treturn x + y",
  "my_list = [1, 2, 3, 4, 5]\nfiltered_list = list(filter(lambda x: x % 2 == 0, my_list))",
  "from itertools import permutations\nmy_list = [1, 2, 3]\npermutations_list = list(permutations(my_list))",
  "my_list = [1, 2, 3, 4, 5]\nreduced_value = reduce(lambda x, y: x + y, my_list)",
  "import json\njson_data = '{\"name\": \"John\", \"age\": 30}'\nparsed_data = json.loads(json_data)",
  "my_set = {1, 2, 3, 4, 5}\nmy_set.add(6)",
  "my_dict = {\"name\": \"John\", \"age\": 30}\nkeys = my_dict.keys()",
  "import numpy as np\nmy_array = np.array([1, 2, 3, 4, 5])\ndoubled_array = my_array * 2"
]

export default python;
