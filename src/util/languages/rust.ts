const rust = [
    "fn main() {\n\tprintln!(\"Hello, World!\");\n}",
    "let x = 5;",
    "fn add(a: i32, b: i32) -> i32 {\n\ta + b\n}",
    "let my_vec = vec![1, 2, 3, 4, 5];",
    "let my_string = String::from(\"Hello, World!\");",
    "let x = 5;\nlet y = 10;\nlet sum = x + y;",
    "if condition {\n\t// do something\n} else {\n\t// do something else\n}",
    "for i in 0..5 {\n\tprintln!(\"{}\", i);\n}",
    "let mut x = 5;\nwhile x > 0 {\n\tprintln!(\"{}\", x);\n\tx -= 1;\n}",
    "let result = match my_result {\n\tOk(value) => value,\n\tErr(error) => panic!(error),\n};",
    "use std::collections::HashMap;",
    "use std::fs::File;\nuse std::io::prelude::*;",
    "let mut data = HashMap::new();",
    "let x = 5;\nlet y = 3;\nlet max_value = if x > y { x } else { y };",
    "let my_string = String::from(\"Hello, World!\");\nlet upper_case_string = my_string.to_uppercase();",
    "let my_vec = vec![1, 2, 3, 4, 5];\nlet doubled_vec: Vec<i32> = my_vec.iter().map(|x| x * 2).collect();",
    "fn my_function(arg1: i32, arg2: String) {\n\t// function body\n}",
    "let my_string = String::from(\"Hello, World!\");\nlet result = my_string.contains(\"World\");",
    "let mut my_vec = Vec::new();\nmy_vec.push(5);",
    "let mut my_vec = Vec::new();\nmy_vec.extend([1, 2, 3].iter().cloned());",
    "let my_array: [i32; 5] = [1, 2, 3, 4, 5];",
    "let my_tuple = (5, \"Hello\");",
    "let my_result = add(3, 5);",
    "let my_string = String::from(\"Hello, World!\");\nlet substring = &my_string[0..5];",
    "let my_string = String::from(\"Hello, World!\");\nlet replaced_string = my_string.replace(\"World\", \"Rust\");",
    "let my_string = String::from(\"  Hello, World!  \");\nlet trimmed_string = my_string.trim();",
    "let my_string = String::from(\"Hello, World!\");\nlet parts: Vec<&str> = my_string.split(\", \").collect();",
    "let my_string = String::from(\"Hello, World!\");\nlet parts: Vec<&str> = my_string.split_whitespace().collect();",
    "let my_string = String::from(\"Hello, World!\");\nlet reversed_string: String = my_string.chars().rev().collect();",
    "let my_string = String::from(\"Hello, World!\");\nlet concatenated_string = format!(\"{} - {}\", my_string, other_string);",
    "let my_string = String::from(\"Hello, World!\");\nlet bytes = my_string.as_bytes();",
    "let my_string = String::from(\"Hello, World!\");\nlet length = my_string.len();"
]

export default rust;
